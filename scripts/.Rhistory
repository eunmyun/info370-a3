# Exploratory Data Analysis
# Choose relevant characteristics
strava.activity <- strava.activity[,c("athlete.country", "athlete.sex", "achievement_count", "average_heartrate", "average_speed", "distance", "elapsed_time", "kilojoules", "location_country", "max_heartrate", "max_speed", "moving_time", "total_elevation_gain", "type", "kudos_count")]
View(head(strava.activity))
# Get rid of rows with no gender
strava.activity <- filter(strava.activity, athlete.sex != "")
View(strava.activity)
write.csv(strava.activity, file = "cleaned_data.csv")
# Load necessary data
strava.activity <- read.csv(file='strava_activity.csv', stringsAsFactors = FALSE)
# Exploratory Data Analysis
# Choose relevant characteristics
strava.activity <- strava.activity[,c("athlete.country", "athlete.sex", "achievement_count", "average_heartrate", "average_speed", "distance", "elapsed_time", "kilojoules", "location_country", "max_heartrate", "max_speed", "moving_time", "total_elevation_gain", "type", "kudos_count")]
View(head(strava.activity))
# Get rid of rows with no gender
strava.activity <- filter(strava.activity, athlete.sex != "")
View(strava.activity)
write.csv(strava.activity, file = "cleaned_data.csv")
library(dplyr)
# Load necessary data
strava.activity <- read.csv(file='.cleaned_data.csv', stringsAsFactors = FALSE)
# Exploratory Data Analysis
# Choose relevant characteristics
strava.activity <- strava.activity[,c("athlete.country", "athlete.sex", "achievement_count", "average_heartrate", "average_speed", "distance", "elapsed_time", "kilojoules", "location_country", "max_heartrate", "max_speed", "moving_time", "total_elevation_gain", "type", "kudos_count")]
View(head(strava.activity))
# Get rid of rows with no gender
strava.activity <- filter(strava.activity, athlete.sex != "")
View(strava.activity)
# Basic observation
# number of characteristics
ncol(strava.activity)
# number of entries
nrow(strava.activity)
# number of males
nrow(filter(strava.activity, athlete.sex == 'M'))
# number of females
nrow(filter(strava.activity, athlete.sex == 'F'))
# The column average_speed is distance divided by moving time
speed <- strava.activity %>%
mutate(calculated = distance / moving_time) %>%
select("average_speed", "calculated")
View(speed)
# Plot distributions of some variables
par(mfrow=c(3,1))
avg.speed <- table(as.integer(strava.activity$average_speed))
barplot(avg.speed, main="Average Speed Distribution", xlab="Average Speed Rounded to Integer", ylab="Number of Athletes")
avg.kj <- table(as.integer(strava.activity$kilojoules))
barplot(avg.kj, main="Average Energe(KJ) Distribution", xlab="Average Energy(KJ)", ylab="Number of Athletes")
avg.heartrate = table(as.integer(strava.activity$average_heartrate))
barplot(avg.heartrate, main="Average Heart Rate Distribution", xlab="Average Heart Rate", ylab="Number of Athletes")
# Group by type and calculated averages
by.type <- strava.activity %>%
group_by(type) %>%
summarise(avg_time = mean(moving_time, na.rm=TRUE),
avg_distance = mean(distance, na.rm=TRUE),
avg_elevation = mean(total_elevation_gain, na.rm=TRUE),
avg_speed = mean(average_speed, na.rm=TRUE),
avg_kilojoules = mean(kilojoules, na.rm=TRUE),
avg_heartrate = mean(average_heartrate, na.rm=TRUE),
total = n(),
male = sum(athlete.sex == 'M'),
female = sum(athlete.sex == 'F'))
View(by.type)
# Group by gender and calculated averages
by.gender <- strava.activity %>%
group_by(athlete.sex) %>%
summarise(avg_time = mean(moving_time, na.rm=TRUE),
avg_distance = mean(distance, na.rm=TRUE),
avg_elevation = mean(total_elevation_gain, na.rm=TRUE),
avg_speed = mean(average_speed, na.rm=TRUE),
avg_kilojoules = mean(kilojoules, na.rm=TRUE),
avg_heartrate = mean(average_heartrate, na.rm=TRUE),
total = n())
View(by.gender)
library(dplyr)
# Load necessary data
strava.activity <- read.csv(file='cleaned_data.csv', stringsAsFactors = FALSE)
# Exploratory Data Analysis
# Choose relevant characteristics
strava.activity <- strava.activity[,c("athlete.country", "athlete.sex", "achievement_count", "average_heartrate", "average_speed", "distance", "elapsed_time", "kilojoules", "location_country", "max_heartrate", "max_speed", "moving_time", "total_elevation_gain", "type", "kudos_count")]
View(head(strava.activity))
# Get rid of rows with no gender
strava.activity <- filter(strava.activity, athlete.sex != "")
View(strava.activity)
# Basic observation
# number of characteristics
ncol(strava.activity)
# number of entries
nrow(strava.activity)
# number of males
nrow(filter(strava.activity, athlete.sex == 'M'))
# number of females
nrow(filter(strava.activity, athlete.sex == 'F'))
# The column average_speed is distance divided by moving time
speed <- strava.activity %>%
mutate(calculated = distance / moving_time) %>%
select("average_speed", "calculated")
View(speed)
# Plot distributions of some variables
par(mfrow=c(3,1))
avg.speed <- table(as.integer(strava.activity$average_speed))
barplot(avg.speed, main="Average Speed Distribution", xlab="Average Speed Rounded to Integer", ylab="Number of Athletes")
avg.kj <- table(as.integer(strava.activity$kilojoules))
barplot(avg.kj, main="Average Energe(KJ) Distribution", xlab="Average Energy(KJ)", ylab="Number of Athletes")
avg.heartrate = table(as.integer(strava.activity$average_heartrate))
barplot(avg.heartrate, main="Average Heart Rate Distribution", xlab="Average Heart Rate", ylab="Number of Athletes")
# Group by type and calculated averages
by.type <- strava.activity %>%
group_by(type) %>%
summarise(avg_time = mean(moving_time, na.rm=TRUE),
avg_distance = mean(distance, na.rm=TRUE),
avg_elevation = mean(total_elevation_gain, na.rm=TRUE),
avg_speed = mean(average_speed, na.rm=TRUE),
avg_kilojoules = mean(kilojoules, na.rm=TRUE),
avg_heartrate = mean(average_heartrate, na.rm=TRUE),
total = n(),
male = sum(athlete.sex == 'M'),
female = sum(athlete.sex == 'F'))
View(by.type)
# Group by gender and calculated averages
by.gender <- strava.activity %>%
group_by(athlete.sex) %>%
summarise(avg_time = mean(moving_time, na.rm=TRUE),
avg_distance = mean(distance, na.rm=TRUE),
avg_elevation = mean(total_elevation_gain, na.rm=TRUE),
avg_speed = mean(average_speed, na.rm=TRUE),
avg_kilojoules = mean(kilojoules, na.rm=TRUE),
avg_heartrate = mean(average_heartrate, na.rm=TRUE),
total = n())
View(by.gender)
library(ggplot2)
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
p <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_kilojoules, fill=athlete.sex)) +
geom_bar(stat="identity")
p2 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_speed, fill=athlete.sex)) +
geom_bar(stat="identity")
p3 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_distance, fill=athlete.sex)) +
geom_bar(stat="identity")
p4 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_heartrate, fill=athlete.sex)) +
geom_bar(stat="identity")
multiplot(p, p2, p3, p4, cols=2)
mftable <- function(exercise.type) {
t <- strava.activity %>%
filter(type == exercise.type) %>%
group_by(athlete.sex) %>%
summarise(avg_time = mean(moving_time, na.rm=TRUE),
avg_distance = mean(distance, na.rm=TRUE),
avg_elevation = mean(total_elevation_gain, na.rm=TRUE),
avg_speed = mean(average_speed, na.rm=TRUE),
avg_kilojoules = mean(kilojoules, na.rm=TRUE),
avg_heartrate = mean(average_heartrate, na.rm=TRUE),
total = n())
return(t)
}
ride <- mftable('Ride')
# Statistical Modelling: Multinomial Regression Analysis
library("nnet")
strava.activity$athlete.sex <- factor(strava.activity$athlete.sex)
strava.activity$gender1 <- relevel(strava.activity$athlete.sex, ref = "F")
test1 <- multinom(gender1 ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test1)
strava.activity$gender = relevel(strava.activity$athlete.sex, ref = "M")
test2 <- multinom(gender ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test2)
View(by.gender)
library(ggplot2)
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
p <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_kilojoules, fill=athlete.sex)) +
geom_bar(stat="identity")
p2 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_speed, fill=athlete.sex)) +
geom_bar(stat="identity")
p3 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_distance, fill=athlete.sex)) +
geom_bar(stat="identity")
p4 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_heartrate, fill=athlete.sex)) +
geom_bar(stat="identity")
multiplot(p, p2, p3, p4, cols=2)
# Statistical Modelling: Multinomial Regression Analysis
library("nnet")
strava.activity$athlete.sex <- factor(strava.activity$athlete.sex)
strava.activity$gender1 <- relevel(strava.activity$athlete.sex, ref = "F")
test1 <- multinom(gender1 ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test1)
strava.activity$gender = relevel(strava.activity$athlete.sex, ref = "M")
test2 <- multinom(gender ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test2)
library(ggplot2)
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
p <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_kilojoules, fill=athlete.sex)) +
geom_bar(stat="identity")
p2 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_speed, fill=athlete.sex)) +
geom_bar(stat="identity")
p3 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_distance, fill=athlete.sex)) +
geom_bar(stat="identity")
p4 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_heartrate, fill=athlete.sex)) +
geom_bar(stat="identity")
multiplot(p, p2, p3, p4, cols=2)
# Statistical Modelling: Multinomial Regression Analysis
library("nnet")
strava.activity$athlete.sex <- factor(strava.activity$athlete.sex)
strava.activity$gender1 <- relevel(strava.activity$athlete.sex, ref = "F")
test1 <- multinom(gender1 ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test1)
strava.activity$gender = relevel(strava.activity$athlete.sex, ref = "M")
test2 <- multinom(gender ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test2)
#install.packages("dplyr")
#install.packages("ggplot2")
# Question 2:
df2 <- strava.activity %>%
select('kudos_count', 'kilojoules', 'average_heartrate') %>%
filter(average_heartrate != 0.0) %>%
mutate(energy_per_hr = kilojoules / average_heartrate) %>%
filter(energy_per_hr != is.na(energy_per_hr)) %>%
filter(energy_per_hr < 100)
View(df2)
cor(df2[,1], 'kudos_count','energy_per_hr', use = "pairwise.complete.obs")
t.test(df2$energy_per_hr, df2$kudos_count, paired = FALSE)
fit <- lm(energy_per_hr ~ kudos_count, data = df2)
plot(energy_per_hr ~ kudos_count, data = df2)
abline(fit)
# Statistical Analysis: Linear/multiple Regression
fit <- lm(energy_per_hr ~ kudos_count, data = df2)
plot(energy_per_hr ~ kudos_count, data = df2)
abline(fit)
summary(fit)
fit2  <- lm(kudos_count ~ energy_per_hr, data = df2)
plot(kudos_count ~ energy_per_hr, data = df2, main="Fitness vs. Kudos Earned")
abline(fit2)
summary(fit2)
fit3 <- lm(kudos_count ~ kilojoules + average_heartrate, data = df2)
plot(kudos_count ~ kilojoules + average_heartrate, data = df2)
abline(fit3)
summary(fit3)
# Load necessary libraries
library(dplyr)
# Load necessary data
strava.activity <- read.csv(file='cleaned_data.csv', stringsAsFactors = FALSE)
# Exploratory Data Analysis
# Choose relevant characteristics
strava.activity <- strava.activity[,c("athlete.country", "athlete.sex", "achievement_count", "average_heartrate", "average_speed", "distance", "elapsed_time", "kilojoules", "location_country", "max_heartrate", "max_speed", "moving_time", "total_elevation_gain", "type", "kudos_count")]
View(head(strava.activity))
# Get rid of rows with no gender
strava.activity <- filter(strava.activity, athlete.sex != "")
View(strava.activity)
# Basic observation
# number of characteristics
ncol(strava.activity)
# number of entries
nrow(strava.activity)
# number of males
nrow(filter(strava.activity, athlete.sex == 'M'))
# number of females
nrow(filter(strava.activity, athlete.sex == 'F'))
# The column average_speed is distance divided by moving time
speed <- strava.activity %>%
mutate(calculated = distance / moving_time) %>%
select("average_speed", "calculated")
View(speed)
# Plot distributions of some variables
par(mfrow=c(3,1))
avg.speed <- table(as.integer(strava.activity$average_speed))
barplot(avg.speed, main="Average Speed Distribution", xlab="Average Speed Rounded to Integer", ylab="Number of Athletes")
avg.kj <- table(as.integer(strava.activity$kilojoules))
barplot(avg.kj, main="Average Energe(KJ) Distribution", xlab="Average Energy(KJ)", ylab="Number of Athletes")
avg.heartrate = table(as.integer(strava.activity$average_heartrate))
barplot(avg.heartrate, main="Average Heart Rate Distribution", xlab="Average Heart Rate", ylab="Number of Athletes")
# Group by type and calculated averages
by.type <- strava.activity %>%
group_by(type) %>%
summarise(avg_time = mean(moving_time, na.rm=TRUE),
avg_distance = mean(distance, na.rm=TRUE),
avg_elevation = mean(total_elevation_gain, na.rm=TRUE),
avg_speed = mean(average_speed, na.rm=TRUE),
avg_kilojoules = mean(kilojoules, na.rm=TRUE),
avg_heartrate = mean(average_heartrate, na.rm=TRUE),
total = n(),
male = sum(athlete.sex == 'M'),
female = sum(athlete.sex == 'F'))
View(by.type)
# Group by gender and calculated averages
by.gender <- strava.activity %>%
group_by(athlete.sex) %>%
summarise(avg_time = mean(moving_time, na.rm=TRUE),
avg_distance = mean(distance, na.rm=TRUE),
avg_elevation = mean(total_elevation_gain, na.rm=TRUE),
avg_speed = mean(average_speed, na.rm=TRUE),
avg_kilojoules = mean(kilojoules, na.rm=TRUE),
avg_heartrate = mean(average_heartrate, na.rm=TRUE),
total = n())
View(by.gender)
write.csv(by.gender, file = "gender_data.csv")
by.gender <- read.csv(file='gender_data.csv', stringsAsFactors = FALSE)
library(ggplot2)
by.gender <- read.csv(file='gender_data.csv', stringsAsFactors = FALSE)
strava.activity <- read.csv(file='cleaned_data.csv', stringsAsFactors = FALSE)
#putting graph in one sheet
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
p <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_kilojoules, fill=athlete.sex)) +
geom_bar(stat="identity")
p2 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_speed, fill=athlete.sex)) +
geom_bar(stat="identity")
p3 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_distance, fill=athlete.sex)) +
geom_bar(stat="identity")
p4 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_heartrate, fill=athlete.sex)) +
geom_bar(stat="identity")
multiplot(p, p2, p3, p4, cols=2)
# Statistical Modelling: Multinomial Regression Analysis
library("nnet")
strava.activity$athlete.sex <- factor(strava.activity$athlete.sex)
strava.activity$gender1 <- relevel(strava.activity$athlete.sex, ref = "F")
test1 <- multinom(gender1 ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test1)
strava.activity$gender = relevel(strava.activity$athlete.sex, ref = "M")
test2 <- multinom(gender ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test2)
library(ggplot2)
by.gender <- read.csv(file='gender_data.csv', stringsAsFactors = FALSE)
strava.activity <- read.csv(file='cleaned_data.csv', stringsAsFactors = FALSE)
#putting graph in one sheet
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
p <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_kilojoules, fill=athlete.sex)) +
geom_bar(stat="identity")
p2 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_speed, fill=athlete.sex)) +
geom_bar(stat="identity")
p3 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_distance, fill=athlete.sex)) +
geom_bar(stat="identity")
p4 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_heartrate, fill=athlete.sex)) +
geom_bar(stat="identity")
multiplot(p, p2, p3, p4, cols=2)
# Statistical Modelling: Multinomial Regression Analysis
library("nnet")
strava.activity$athlete.sex <- factor(strava.activity$athlete.sex)
strava.activity$gender1 <- relevel(strava.activity$athlete.sex, ref = "F")
test1 <- multinom(gender1 ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test1)
strava.activity$gender = relevel(strava.activity$athlete.sex, ref = "M")
test2 <- multinom(gender ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test2)
# Load necessary data
strava.activity <- read.csv(file='strava_activity.csv', stringsAsFactors = FALSE)
#Question 1:
# Choose relevant characteristics
strava.activity <- strava.activity[,c("athlete.country", "athlete.sex", "achievement_count", "average_heartrate", "average_speed", "distance", "elapsed_time", "kilojoules", "location_country", "max_heartrate", "max_speed", "moving_time", "total_elevation_gain", "type", "kudos_count")]
View(head(strava.activity))
# Get rid of rows with no gender
strava.activity <- filter(strava.activity, athlete.sex != "")
View(strava.activity)
#write csv
write.csv(strava.activity, file = "cleaned_data.csv")
#Question 2:
df2 <- strava.activity %>%
select('kudos_count', 'kilojoules', 'average_heartrate') %>%
filter(average_heartrate != 0.0) %>%
mutate(energy_per_hr = kilojoules / average_heartrate) %>%
filter(energy_per_hr != is.na(energy_per_hr)) %>%
filter(energy_per_hr < 100)
View(df2)
#write csv
write.csv(df2, file = "fitness.csv")
#import library
library(ggplot2)
#Question 1:
by.gender <- read.csv(file='gender_data.csv', stringsAsFactors = FALSE)
strava.activity <- read.csv(file='cleaned_data.csv', stringsAsFactors = FALSE)
#putting graph in one sheet
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
p <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_kilojoules, fill=athlete.sex)) +
geom_bar(stat="identity")
p2 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_speed, fill=athlete.sex)) +
geom_bar(stat="identity")
p3 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_distance, fill=athlete.sex)) +
geom_bar(stat="identity")
p4 <- ggplot(data=by.gender, aes(x=athlete.sex, y=avg_heartrate, fill=athlete.sex)) +
geom_bar(stat="identity")
multiplot(p, p2, p3, p4, cols=2)
# Statistical Modelling: Multinomial Regression Analysis
library("nnet")
strava.activity$athlete.sex <- factor(strava.activity$athlete.sex)
strava.activity$gender1 <- relevel(strava.activity$athlete.sex, ref = "F")
test1 <- multinom(gender1 ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test1)
strava.activity$gender = relevel(strava.activity$athlete.sex, ref = "M")
test2 <- multinom(gender ~ average_speed + average_heartrate + kilojoules + total_elevation_gain, data = strava.activity)
summary(test2)
#Question 2:
df2 <- read.csv(file='fitness.csv', stringsAsFactors = FALSE)
# Statistical Analysis: Linear/multiple Regression
fit <- lm(energy_per_hr ~ kudos_count, data = df2)
plot(energy_per_hr ~ kudos_count, data = df2)
abline(fit)
summary(fit)
fit2  <- lm(kudos_count ~ energy_per_hr, data = df2)
plot(kudos_count ~ energy_per_hr, data = df2, main="Fitness vs. Kudos Earned")
abline(fit2)
summary(fit2)
fit3 <- lm(kudos_count ~ kilojoules + average_heartrate, data = df2)
plot(kudos_count ~ kilojoules + average_heartrate, data = df2)
summary(fit3)
